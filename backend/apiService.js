const axios = require('axios');
const dbClient = require('./db'); // Import the PostgreSQL client

const apiKey = process.env.GOOGLE_API_KEY; // Load API key from environment variables
const googleApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

// Function to call Google API for query optimization
async function optimizeQuery(originalQuery) {
    const requestData = {
        contents: [
            {
                parts: [
                    {
                        text: `Optimize the following SQL query for faster execution and return only the optimized SQL query without any additional text. Provide in plain text without any formatting or code blocks: ${originalQuery}`
                    }
                ]
            }
        ]
    };

    try {
        const response = await axios.post(googleApiUrl, requestData, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const candidates = response.data.candidates;

        return candidates && candidates.length > 0 ? candidates[0].content : originalQuery;
    } catch (error) {
        console.error('Error during API optimization:', error);
        throw error;
    }
}

// Function to generate dbgen queries from the original and optimized queries
async function generateDbGenQueries(query) {
    console.log("generating DbGen Queries for ==>", query)
    const requestData = {
        contents: [
            {
                parts: [
                    {
                        text: `I have the dbgen genrated data in a database. 
                        The database consists of several tables: The customer table includes fields such as c_custkey (integer), c_name (character varying), c_address (character varying),
                        c_nationkey (integer), c_phone (character), c_acctbal (numeric), c_mktsegment (character), c_comment (character varying), and c_dummy (character varying).
                        The lineitem table contains l_orderkey (integer), l_partkey (integer), l_suppkey (integer), l_linenumber (integer), l_quantity (numeric), l_extendedprice (numeric), l_discount (numeric),
                        l_tax (numeric), l_returnflag (character), l_linestatus (character), l_shipdate (date), l_commitdate (date), l_receiptdate (date), l_shipinstruct (character), l_shipmode (character),
                        l_comment (character varying), and l_dummy (character varying). The nation table includes n_nationkey (integer), n_name (character), n_regionkey (integer), n_comment (character varying),
                        and n_dummy (character varying). The orders table features o_orderkey (integer), o_custkey (integer), o_orderstatus (character), o_totalprice (numeric), o_orderdate (date),
                        o_orderpriority (character), o_clerk (character), o_shippriority (integer), o_comment (character varying), and o_dummy (character varying). The part table consists of p_partkey (integer),
                         p_name (character varying), p_mfgr (character), p_brand (character), p_type (character varying), p_size (integer), p_container (character), p_retailprice (numeric), p_comment (character varying),
                         and p_dummy (character varying). The partsupp table has fields such as ps_partkey (integer), ps_suppkey (integer), ps_availqty (integer), ps_supplycost (numeric), ps_comment (character varying),
                         and ps_dummy (character varying). The region table contains r_regionkey (integer), r_name (character), r_comment (character varying), and r_dummy (character varying). Finally, the supplier table
                         includes s_suppkey (integer), s_name (character), s_address (character varying), s_nationkey (integer), s_phone (character), s_acctbal (numeric), s_comment (character varying), and s_dummy (character varying).
                        I have the following SQL query:\n${query};\n I want to run a similar query on database above which is generated by the dbgen tool, which creates data for benchmark testing. 
                        Ensure that all column references are in the format "table_alias.column_name".
                        Please provide the equivalent query for dbgen data as plain text without any formatting or code blocks. Only respond with the SQL query, without any additional text. `
                    }
                ]
            }
        ]
    };

    try {
        const response = await axios.post(googleApiUrl, requestData, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const candidates = response.data.candidates;

        return candidates && candidates.length > 0 ? candidates[0].content : query;
    } catch (error) {
        console.error('Error generating dbgen query:', error);
        throw error;
    }
}

// Function to profile a query execution
async function profileQueryExecution(query) {
    const executionTimes = []; // Store just the execution times
    console.log("Running Query==>", query);

    for (let i = 0; i < 10; i++) { // Run the query 10 times
        const startTime = process.hrtime();
        try {
            await dbClient.query(query); // Execute the query (ignore results for profiling)
            const elapsedTime = process.hrtime(startTime);

            // Round execution time to one decimal place and store it
            const executionTime = parseFloat((elapsedTime[0] * 1e3 + elapsedTime[1] / 1e6).toFixed(1));
            executionTimes.push(executionTime);
        } catch (error) {
            console.error('Error executing query:', error);
            throw error;
        }
    }

    // Calculate profiling metrics
    const totalExecutionTime = executionTimes.reduce((sum, time) => sum + time, 0);
    const averageExecutionTime = parseFloat((totalExecutionTime / executionTimes.length).toFixed(1));

    return {
        averageExecutionTime,
        execTimes: executionTimes // Return the array of rounded execution times
    };
}

// Export functions for use in other modules
module.exports = {
    optimizeQuery,
    generateDbGenQueries,
    profileQueryExecution
};
